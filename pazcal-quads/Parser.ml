type token =
  | T_and
  | T_bool of (Types.typ)
  | T_break
  | T_case
  | T_char of (Types.typ)
  | T_const
  | T_continue
  | T_default
  | T_do
  | T_DOWNTO
  | T_else
  | T_false
  | T_FOR
  | T_FORM
  | T_FUNC
  | T_if
  | T_int of (Types.typ)
  | T_MOD
  | T_NEXT
  | T_not
  | T_or
  | T_PROC
  | T_PROGRAM
  | T_REAL of (Types.typ)
  | T_return
  | T_STEP
  | T_switch
  | T_TO
  | T_true
  | T_while
  | T_WRITE
  | T_WRITELN
  | T_WRITESP
  | T_WRITESPLN
  | T_eq of (string)
  | T_lparen
  | T_rparen
  | T_plus
  | T_minus
  | T_times
  | T_equal
  | T_greater
  | T_less
  | T_less_equal
  | T_greater_equal
  | T_not_equal
  | T_mod
  | T_mod_equal of (string)
  | T_plus_equal of (string)
  | T_minus_equal of (string)
  | T_div_equal of (string)
  | T_times_equal of (string)
  | T_minus_minus
  | T_plus_plus
  | T_OR
  | T_AND
  | T_NOT
  | T_div
  | T_ampersand
  | T_semicolon
  | T_fullstop
  | T_colon
  | T_comma
  | T_lbracket
  | T_rbracket
  | T_lbrace
  | T_rbrace
  | T_name of (string)
  | T_real_const of (string)
  | T_const_char of (string)
  | T_string_const of (string)
  | T_int_const of (string)
  | T_eof

open Parsing;;
# 1 "Parser.mly"

open Printf 
        open Types
        open Identifier
        open Symbol
        open Semantic 
        open Error
        open Parsing
        open Output
        open QuadTypes
        open Quads

        let printTup (a,b) = print_string a; print_string " "; List.iter (printf "%d ") b

        let rec printList = function 
        | [] -> ()
        | [(a,b)] -> printTup (a,b)
        | (a::b) -> printTup a ;  printList b;;

    (*function to create table type*)

        let rec table_type var_type = function 
        | [] -> var_type
        | (a::b) -> let x = table_type var_type b in TYPE_array(x,a)

        (*function to register a variable*)
        let registerVar var_type (a,b) =  ignore(newVariable (id_make a) (table_type var_type b) true)
    (* Simple Function to get Expression Position *)
    let get_binop_pos () =
       (rhs_start_pos 1, 
        rhs_start_pos 3)


        (*function to register a param*)
        let register_param anc (param_type, (name, mode, nlist)) = 
        let var_type = table_type param_type nlist
        in ignore(newParameter (id_make name)var_type mode anc true)

        (*function to register a function/proc and its params*)
        let registerFun (fun_type,fun_entry) a = ignore(List.map (register_param fun_entry) a); ignore(endFunctionHeader fun_entry fun_type); fun_entry

        (*function to get variable's type*)
        let rec get_var_type = function
        |(var_type, 0) -> var_type
        |(TYPE_array (t,s), a) -> get_var_type (t, a-1)
        |_ -> ignore(error "tables sizes"); TYPE_none
        


        (*function to get entry's name*)
        let get_name e = id_name e.entry_id 

        (*handle tuples with 3 elements*)
        let first_el (a,_,_) = a

        let second_el (_,b,_) = b

        let third_el (_,_,c) = c

        (*get the parameter list of a function as it is in the symbol table*)
        let get_param_list a = 
        match a.entry_info with 
        | ENTRY_function inf -> inf.function_paramlist 
        | _ -> []

        (*function to test printing*)

        
# 147 "Parser.ml"
let yytransl_const = [|
  257 (* T_and *);
  259 (* T_break *);
  260 (* T_case *);
  262 (* T_const *);
  263 (* T_continue *);
  264 (* T_default *);
  265 (* T_do *);
  266 (* T_DOWNTO *);
  267 (* T_else *);
  268 (* T_false *);
  269 (* T_FOR *);
  270 (* T_FORM *);
  271 (* T_FUNC *);
  272 (* T_if *);
  274 (* T_MOD *);
  275 (* T_NEXT *);
  276 (* T_not *);
  277 (* T_or *);
  278 (* T_PROC *);
  279 (* T_PROGRAM *);
  281 (* T_return *);
  282 (* T_STEP *);
  283 (* T_switch *);
  284 (* T_TO *);
  285 (* T_true *);
  286 (* T_while *);
  287 (* T_WRITE *);
  288 (* T_WRITELN *);
  289 (* T_WRITESP *);
  290 (* T_WRITESPLN *);
  292 (* T_lparen *);
  293 (* T_rparen *);
  294 (* T_plus *);
  295 (* T_minus *);
  296 (* T_times *);
  297 (* T_equal *);
  298 (* T_greater *);
  299 (* T_less *);
  300 (* T_less_equal *);
  301 (* T_greater_equal *);
  302 (* T_not_equal *);
  303 (* T_mod *);
  309 (* T_minus_minus *);
  310 (* T_plus_plus *);
  311 (* T_OR *);
  312 (* T_AND *);
  313 (* T_NOT *);
  314 (* T_div *);
  315 (* T_ampersand *);
  316 (* T_semicolon *);
  317 (* T_fullstop *);
  318 (* T_colon *);
  319 (* T_comma *);
  320 (* T_lbracket *);
  321 (* T_rbracket *);
  322 (* T_lbrace *);
  323 (* T_rbrace *);
  329 (* T_eof *);
    0|]

let yytransl_block = [|
  258 (* T_bool *);
  261 (* T_char *);
  273 (* T_int *);
  280 (* T_REAL *);
  291 (* T_eq *);
  304 (* T_mod_equal *);
  305 (* T_plus_equal *);
  306 (* T_minus_equal *);
  307 (* T_div_equal *);
  308 (* T_times_equal *);
  324 (* T_name *);
  325 (* T_real_const *);
  326 (* T_const_char *);
  327 (* T_string_const *);
  328 (* T_int_const *);
    0|]

let yylhs = "\255\255\
\001\000\039\000\002\000\002\000\003\000\003\000\003\000\003\000\
\005\000\004\000\006\000\006\000\007\000\008\000\008\000\009\000\
\009\000\009\000\010\000\010\000\012\000\014\000\014\000\015\000\
\015\000\013\000\013\000\016\000\016\000\016\000\016\000\017\000\
\017\000\011\000\011\000\041\000\018\000\042\000\040\000\019\000\
\019\000\019\000\019\000\020\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\022\000\023\000\023\000\024\000\024\000\025\000\025\000\
\026\000\027\000\027\000\027\000\028\000\028\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\043\000\033\000\033\000\033\000\033\000\033\000\033\000\
\034\000\034\000\034\000\034\000\036\000\036\000\035\000\035\000\
\030\000\030\000\031\000\031\000\032\000\032\000\037\000\037\000\
\037\000\037\000\038\000\038\000\038\000\000\000"

let yylen = "\002\000\
\003\000\000\000\000\000\002\000\001\000\001\000\001\000\001\000\
\003\000\005\000\000\000\003\000\004\000\000\000\003\000\001\000\
\003\000\002\000\003\000\004\000\004\000\000\000\003\000\000\000\
\004\000\002\000\003\000\001\000\002\000\005\000\004\000\000\000\
\004\000\003\000\003\000\004\000\004\000\000\000\000\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\001\000\001\000\002\000\002\000\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\000\000\004\000\003\000\005\000\000\000\003\000\
\003\000\000\000\002\000\002\000\001\000\001\000\001\000\004\000\
\003\000\003\000\002\000\007\000\005\000\006\000\008\000\008\000\
\011\000\008\000\002\000\002\000\002\000\003\000\003\000\004\000\
\006\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\005\000\003\000\005\000\000\000\002\000\001\000\003\000\
\000\000\003\000\003\000\003\000\000\000\003\000\001\000\001\000\
\001\000\001\000\001\000\006\000\008\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\134\000\000\000\041\000\042\000\000\000\000\000\
\040\000\000\000\043\000\000\000\000\000\005\000\006\000\007\000\
\000\000\000\000\008\000\000\000\000\000\000\000\000\000\026\000\
\001\000\004\000\039\000\000\000\039\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\000\034\000\000\000\000\000\
\106\000\106\000\000\000\000\000\106\000\106\000\127\000\128\000\
\129\000\130\000\087\000\000\000\085\000\086\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\035\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\039\000\000\000\
\000\000\000\000\099\000\100\000\000\000\000\000\000\000\050\000\
\000\000\049\000\000\000\000\000\000\000\000\000\101\000\046\000\
\047\000\048\000\045\000\000\000\052\000\053\000\000\000\000\000\
\000\000\000\000\074\000\107\000\110\000\108\000\109\000\111\000\
\112\000\000\000\000\000\000\000\091\000\081\000\083\000\084\000\
\000\000\039\000\021\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\000\000\037\000\009\000\000\000\010\000\
\000\000\000\000\000\000\057\000\000\000\000\000\000\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\102\000\000\000\000\000\077\000\000\000\000\000\090\000\089\000\
\000\000\000\000\000\000\000\000\000\000\103\000\029\000\000\000\
\000\000\023\000\000\000\015\000\036\000\012\000\000\000\000\000\
\000\000\051\000\070\000\063\000\000\000\000\000\000\000\060\000\
\000\000\000\000\000\000\000\000\000\000\000\000\062\000\000\000\
\071\000\061\000\000\000\000\000\000\000\000\000\000\000\088\000\
\000\000\104\000\000\000\000\000\000\000\000\000\000\000\020\000\
\000\000\000\000\000\000\000\000\000\000\000\000\078\000\076\000\
\000\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\094\000\080\000\000\000\126\000\
\105\000\000\000\030\000\025\000\000\000\000\000\000\000\000\000\
\092\000\000\000\000\000\000\000\000\000\000\000\096\000\000\000\
\000\000\095\000\000\000\000\000\098\000\000\000\000\000\000\000\
\132\000\000\000\033\000\000\000\000\000\123\000\124\000\000\000\
\118\000\122\000\000\000\000\000\000\000\000\000\000\000\120\000\
\133\000\097\000"

let yydgoto = "\002\000\
\003\000\012\000\013\000\053\000\036\000\074\000\054\000\069\000\
\032\000\067\000\016\000\017\000\018\000\063\000\170\000\118\000\
\221\000\019\000\020\000\120\000\121\000\093\000\099\000\094\000\
\198\000\029\000\057\000\058\000\059\000\243\000\244\000\204\000\
\108\000\226\000\255\000\000\001\060\000\165\000\004\000\038\000\
\034\000\061\000\077\000"

let yysindex = "\020\000\
\000\000\000\000\000\000\189\255\000\000\000\000\123\255\123\255\
\000\000\211\254\000\000\005\255\189\255\000\000\000\000\000\000\
\027\255\024\255\000\000\055\255\047\255\062\255\073\255\000\000\
\000\000\000\000\000\000\026\000\000\000\123\255\239\254\083\255\
\080\255\084\255\119\255\092\255\000\000\000\000\097\255\098\255\
\000\000\000\000\125\255\118\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\229\254\000\000\000\000\092\000\099\255\
\103\255\026\000\026\000\128\255\084\255\000\000\134\255\217\254\
\164\002\164\002\000\000\055\255\105\255\136\255\000\000\164\002\
\062\255\120\255\000\000\000\000\052\255\145\255\164\002\000\000\
\164\002\000\000\164\002\164\002\164\002\164\002\000\000\000\000\
\000\000\000\000\000\000\204\002\000\000\000\000\146\255\148\255\
\106\255\164\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\126\255\132\255\164\002\000\000\000\000\000\000\000\000\
\080\002\000\000\000\000\137\255\124\255\133\255\043\004\135\255\
\043\004\083\255\000\000\165\255\000\000\000\000\092\255\000\000\
\177\255\140\255\057\003\000\000\087\003\034\255\034\255\000\000\
\164\002\164\002\164\002\164\002\164\002\164\002\164\002\164\002\
\164\002\164\002\164\002\164\002\164\002\164\002\164\002\164\002\
\000\000\164\002\164\002\000\000\177\000\117\000\000\000\000\000\
\236\002\173\255\150\255\043\004\152\255\000\000\000\000\254\255\
\123\255\000\000\157\255\000\000\000\000\000\000\186\255\160\255\
\052\255\000\000\000\000\000\000\034\255\034\255\034\255\000\000\
\073\004\073\004\073\004\073\004\073\004\073\004\000\000\034\255\
\000\000\000\000\117\003\147\003\164\002\187\255\161\255\000\000\
\164\002\000\000\141\002\190\255\166\255\164\255\217\254\000\000\
\164\002\164\002\220\255\167\255\052\255\177\000\000\000\000\000\
\207\000\152\255\172\255\164\002\000\000\166\255\133\255\177\003\
\027\003\197\255\052\255\233\255\000\000\000\000\164\002\000\000\
\000\000\170\255\000\000\000\000\188\255\164\002\164\002\052\255\
\000\000\164\002\255\254\052\255\147\000\166\255\000\000\208\003\
\239\003\000\000\011\255\185\255\000\000\052\255\233\255\232\255\
\000\000\164\002\000\000\164\002\164\002\000\000\000\000\052\255\
\000\000\000\000\192\255\013\004\043\004\043\004\182\255\000\000\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\241\254\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\241\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\028\255\000\000\218\255\218\254\198\255\
\000\000\000\000\000\000\199\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\061\000\000\000\000\000\000\000\000\000\
\000\000\028\255\028\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\191\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\255\223\255\071\255\000\000\
\059\255\198\255\000\000\000\000\000\000\000\000\199\255\000\000\
\000\000\000\000\000\000\000\000\000\000\251\000\025\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\226\255\000\000\000\000\000\000\
\000\000\000\000\000\000\054\255\235\255\000\000\000\000\000\000\
\000\000\000\000\076\255\000\000\000\000\000\000\000\000\000\000\
\191\255\000\000\000\000\000\000\055\001\085\001\115\001\000\000\
\175\001\205\001\235\001\009\002\039\002\069\002\000\000\145\001\
\000\000\000\000\000\000\000\000\000\000\000\000\061\000\000\000\
\000\000\000\000\000\000\000\000\090\255\000\000\000\000\000\000\
\000\000\000\000\237\255\000\000\191\255\226\255\000\000\000\000\
\000\000\235\255\000\000\000\000\000\000\090\255\223\255\000\000\
\000\000\000\000\191\255\002\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\191\255\
\000\000\000\000\000\000\009\255\000\000\090\255\000\000\134\255\
\238\255\000\000\000\000\000\000\000\000\009\255\002\255\253\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\243\254\
\000\000\000\000\000\000\000\000\239\255\240\255\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\252\000\000\000\023\000\200\000\151\000\035\000\157\000\
\212\000\110\000\000\000\000\000\000\000\000\000\059\000\089\000\
\060\255\000\000\004\000\203\255\215\255\228\255\095\000\230\255\
\072\000\236\255\079\000\000\000\195\255\045\000\050\000\084\000\
\000\000\000\000\044\000\056\000\000\000\114\000\000\000\231\255\
\000\000\067\000\087\000"

let yytablesize = 1411
let yytable = "\055\000\
\119\000\056\000\092\000\062\000\119\000\117\000\252\000\038\000\
\097\000\121\000\022\000\023\000\117\000\071\000\242\000\129\000\
\117\000\065\000\126\000\116\000\001\000\016\000\024\000\119\000\
\016\000\235\000\014\000\117\000\117\000\055\000\055\000\056\000\
\056\000\064\000\137\000\014\000\098\000\131\000\015\000\132\000\
\114\000\133\000\134\000\135\000\136\000\125\000\066\000\015\000\
\055\000\003\001\056\000\138\000\038\000\117\000\039\000\157\000\
\158\000\003\000\040\000\030\000\041\000\028\000\044\000\119\000\
\042\000\253\000\161\000\043\000\121\000\033\000\021\000\164\000\
\006\001\142\000\038\000\117\000\044\000\025\000\045\000\021\000\
\149\000\046\000\047\000\048\000\049\000\050\000\027\000\028\000\
\166\000\151\000\131\000\152\000\028\000\038\000\082\000\179\000\
\180\000\181\000\182\000\183\000\184\000\185\000\186\000\187\000\
\188\000\189\000\190\000\191\000\192\000\193\000\194\000\051\000\
\195\000\196\000\206\000\211\000\131\000\080\000\044\000\052\000\
\044\000\044\000\031\000\044\000\005\000\081\000\032\000\006\000\
\078\000\035\000\017\000\095\000\096\000\017\000\082\000\019\000\
\111\000\112\000\019\000\009\000\037\000\083\000\156\000\084\000\
\085\000\068\000\011\000\070\000\055\000\028\000\056\000\229\000\
\032\000\072\000\073\000\214\000\075\000\076\000\109\000\217\000\
\079\000\164\000\086\000\113\000\123\000\241\000\234\000\224\000\
\225\000\110\000\115\000\124\000\207\000\052\000\088\000\089\000\
\090\000\091\000\250\000\128\000\130\000\154\000\254\000\155\000\
\055\000\159\000\056\000\168\000\251\000\245\000\005\000\160\000\
\254\000\006\000\007\000\169\000\248\000\249\000\055\000\171\000\
\056\000\173\000\254\000\008\000\167\000\009\000\175\000\176\000\
\201\000\202\000\010\000\055\000\011\000\056\000\203\000\055\000\
\012\001\056\000\013\001\014\001\066\000\209\000\210\000\215\000\
\098\000\055\000\219\000\056\000\222\000\220\000\227\000\233\000\
\228\000\240\000\246\000\055\000\242\000\056\000\093\000\093\000\
\093\000\093\000\093\000\093\000\093\000\093\000\008\001\247\000\
\018\001\093\000\011\001\016\001\093\000\093\000\022\000\093\000\
\038\000\014\000\011\000\024\000\093\000\093\000\079\000\093\000\
\026\000\080\000\093\000\093\000\093\000\093\000\093\000\125\000\
\127\000\081\000\113\000\116\000\114\000\174\000\172\000\122\000\
\208\000\236\000\082\000\005\000\039\000\230\000\006\000\007\000\
\040\000\083\000\041\000\084\000\085\000\216\000\042\000\223\000\
\093\000\043\000\009\000\010\001\007\001\232\000\093\000\093\000\
\093\000\011\000\044\000\015\001\045\000\009\001\086\000\046\000\
\047\000\048\000\049\000\050\000\218\000\075\000\205\000\000\000\
\075\000\052\000\088\000\089\000\090\000\091\000\075\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\075\000\000\000\
\000\000\075\000\000\000\000\000\000\000\051\000\075\000\000\000\
\075\000\000\000\000\000\000\000\000\000\052\000\000\000\075\000\
\000\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\137\000\075\000\000\000\
\075\000\000\000\075\000\075\000\000\000\075\000\100\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\138\000\000\000\
\000\000\139\000\000\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\000\000\137\000\000\000\000\000\000\000\000\000\
\000\000\000\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\138\000\000\000\000\000\139\000\
\000\000\000\000\000\000\150\000\151\000\000\000\152\000\000\000\
\000\000\137\000\000\000\000\000\000\000\199\000\000\000\001\001\
\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\138\000\000\000\000\000\139\000\000\000\000\000\
\000\000\150\000\151\000\000\000\152\000\000\000\000\000\137\000\
\000\000\002\001\000\000\000\000\000\000\000\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\138\000\000\000\000\000\139\000\000\000\000\000\000\000\150\000\
\151\000\000\000\152\000\000\000\000\000\000\000\000\000\197\000\
\000\000\000\000\000\000\000\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\054\000\000\000\
\000\000\000\000\000\000\000\000\054\000\150\000\151\000\000\000\
\152\000\000\000\000\000\000\000\000\000\231\000\000\000\054\000\
\000\000\000\000\000\000\000\000\054\000\000\000\054\000\000\000\
\000\000\000\000\000\000\000\000\055\000\000\000\000\000\054\000\
\054\000\054\000\055\000\054\000\054\000\054\000\054\000\054\000\
\054\000\000\000\000\000\000\000\000\000\055\000\000\000\000\000\
\000\000\054\000\055\000\000\000\055\000\000\000\054\000\000\000\
\054\000\054\000\073\000\054\000\000\000\055\000\055\000\055\000\
\073\000\055\000\055\000\055\000\055\000\055\000\055\000\000\000\
\000\000\000\000\000\000\073\000\000\000\000\000\000\000\055\000\
\073\000\000\000\073\000\000\000\055\000\000\000\055\000\055\000\
\058\000\055\000\000\000\073\000\073\000\073\000\058\000\073\000\
\073\000\073\000\073\000\073\000\073\000\000\000\000\000\000\000\
\000\000\058\000\000\000\000\000\000\000\073\000\058\000\000\000\
\058\000\000\000\073\000\000\000\073\000\073\000\059\000\073\000\
\000\000\058\000\058\000\058\000\059\000\058\000\058\000\058\000\
\058\000\058\000\058\000\000\000\000\000\000\000\000\000\059\000\
\000\000\000\000\000\000\058\000\059\000\000\000\059\000\000\000\
\058\000\000\000\058\000\058\000\072\000\058\000\000\000\059\000\
\059\000\059\000\072\000\059\000\059\000\059\000\059\000\059\000\
\059\000\000\000\000\000\000\000\000\000\072\000\000\000\000\000\
\000\000\059\000\072\000\000\000\072\000\000\000\059\000\000\000\
\059\000\059\000\064\000\059\000\000\000\072\000\072\000\072\000\
\064\000\072\000\072\000\072\000\072\000\072\000\072\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\
\064\000\000\000\064\000\000\000\072\000\000\000\072\000\072\000\
\066\000\072\000\000\000\064\000\000\000\000\000\066\000\064\000\
\064\000\064\000\064\000\064\000\064\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\066\000\000\000\
\066\000\000\000\064\000\000\000\064\000\064\000\067\000\064\000\
\000\000\066\000\000\000\000\000\067\000\066\000\066\000\066\000\
\066\000\066\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\067\000\000\000\067\000\000\000\
\066\000\000\000\066\000\066\000\068\000\066\000\000\000\067\000\
\000\000\000\000\068\000\067\000\067\000\067\000\067\000\067\000\
\067\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\000\000\000\068\000\000\000\067\000\000\000\
\067\000\067\000\069\000\067\000\000\000\068\000\000\000\000\000\
\069\000\068\000\068\000\068\000\068\000\068\000\068\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\069\000\000\000\069\000\000\000\068\000\000\000\068\000\068\000\
\065\000\068\000\000\000\069\000\000\000\000\000\065\000\069\000\
\069\000\069\000\069\000\069\000\069\000\000\000\000\000\000\000\
\000\000\000\000\000\000\080\000\000\000\162\000\065\000\000\000\
\065\000\000\000\069\000\081\000\069\000\069\000\000\000\069\000\
\000\000\065\000\000\000\000\000\082\000\065\000\065\000\065\000\
\065\000\065\000\065\000\083\000\163\000\084\000\085\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\080\000\065\000\065\000\000\000\065\000\000\000\000\000\
\086\000\081\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\082\000\052\000\088\000\089\000\090\000\091\000\
\080\000\083\000\162\000\084\000\085\000\000\000\000\000\000\000\
\081\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\082\000\000\000\000\000\000\000\000\000\086\000\080\000\
\083\000\087\000\084\000\085\000\000\000\000\000\000\000\081\000\
\000\000\052\000\088\000\089\000\090\000\091\000\000\000\000\000\
\082\000\000\000\000\000\000\000\000\000\086\000\000\000\083\000\
\000\000\084\000\085\000\000\000\137\000\000\000\000\000\000\000\
\052\000\088\000\089\000\090\000\091\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\086\000\138\000\000\000\000\000\
\139\000\000\000\000\000\000\000\000\000\000\000\000\000\052\000\
\088\000\089\000\090\000\091\000\137\000\000\000\000\000\000\000\
\000\000\140\000\141\000\142\000\143\000\144\000\145\000\146\000\
\147\000\148\000\149\000\000\000\000\000\138\000\000\000\000\000\
\139\000\000\000\150\000\151\000\000\000\152\000\000\000\153\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\140\000\141\000\142\000\143\000\144\000\145\000\146\000\
\147\000\148\000\149\000\137\000\000\000\000\000\000\000\000\000\
\000\000\000\000\150\000\151\000\238\000\152\000\000\000\200\000\
\000\000\000\000\000\000\000\000\138\000\000\000\000\000\139\000\
\000\000\000\000\000\000\000\000\000\000\000\000\239\000\000\000\
\000\000\137\000\000\000\000\000\000\000\000\000\000\000\000\000\
\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\138\000\000\000\000\000\139\000\000\000\000\000\
\000\000\150\000\151\000\000\000\152\000\000\000\000\000\137\000\
\000\000\000\000\000\000\000\000\000\000\177\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\138\000\000\000\000\000\139\000\000\000\000\000\000\000\150\000\
\151\000\000\000\152\000\000\000\000\000\137\000\000\000\000\000\
\000\000\000\000\000\000\178\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\138\000\000\000\
\000\000\139\000\000\000\000\000\000\000\150\000\151\000\000\000\
\152\000\000\000\000\000\137\000\000\000\000\000\000\000\000\000\
\000\000\212\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\138\000\000\000\000\000\139\000\
\000\000\000\000\000\000\150\000\151\000\000\000\152\000\000\000\
\000\000\137\000\000\000\000\000\000\000\000\000\000\000\213\000\
\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\138\000\000\000\000\000\139\000\000\000\000\000\
\000\000\150\000\151\000\000\000\152\000\000\000\000\000\000\000\
\137\000\000\000\000\000\000\000\000\000\237\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\000\000\138\000\000\000\000\000\139\000\000\000\000\000\150\000\
\151\000\004\001\152\000\000\000\000\000\000\000\000\000\137\000\
\000\000\000\000\000\000\000\000\000\000\140\000\141\000\142\000\
\143\000\144\000\145\000\146\000\147\000\148\000\149\000\000\000\
\138\000\000\000\000\000\139\000\000\000\000\000\150\000\151\000\
\005\001\152\000\000\000\000\000\000\000\137\000\000\000\000\000\
\000\000\000\000\000\000\000\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\138\000\000\000\
\000\000\139\000\000\000\000\000\000\000\150\000\151\000\000\000\
\152\000\000\000\000\000\137\000\000\000\000\000\000\000\000\000\
\000\000\017\001\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\138\000\000\000\000\000\139\000\
\000\000\000\000\000\000\150\000\151\000\000\000\152\000\000\000\
\000\000\137\000\000\000\000\000\000\000\000\000\000\000\000\000\
\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\138\000\000\000\000\000\139\000\000\000\000\000\
\000\000\150\000\151\000\000\000\152\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\140\000\141\000\
\142\000\000\000\000\000\000\000\000\000\000\000\000\000\149\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\150\000\
\151\000\000\000\152\000"

let yycheck = "\028\000\
\004\001\028\000\044\000\029\000\008\001\019\001\008\001\023\001\
\036\001\008\001\007\000\008\000\004\001\034\000\004\001\077\000\
\008\001\035\001\072\000\059\001\001\000\060\001\068\001\065\000\
\063\001\222\000\004\000\019\001\068\001\058\000\059\000\058\000\
\059\000\030\000\001\001\013\000\064\001\079\000\004\000\081\000\
\061\000\083\000\084\000\085\000\086\000\071\000\064\001\013\000\
\077\000\246\000\077\000\018\001\066\001\067\001\003\001\097\000\
\098\000\073\001\007\001\036\001\009\001\037\001\004\001\067\001\
\013\001\067\001\108\000\016\001\067\001\023\001\004\000\113\000\
\062\001\040\001\066\001\067\001\025\001\073\001\027\001\013\000\
\047\001\030\001\031\001\032\001\033\001\034\001\060\001\063\001\
\114\000\056\001\037\001\058\001\066\001\066\001\067\001\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\150\000\151\000\152\000\060\001\
\154\000\155\000\168\000\177\000\063\001\012\001\060\001\068\001\
\062\001\063\001\068\001\065\001\002\001\020\001\037\001\005\001\
\042\000\068\001\060\001\045\000\046\000\063\001\029\001\060\001\
\058\000\059\000\063\001\017\001\068\001\036\001\037\001\038\001\
\039\001\063\001\024\001\068\001\177\000\066\001\177\000\213\000\
\063\001\035\001\063\001\197\000\060\001\060\001\060\001\201\000\
\036\001\203\000\057\001\036\001\060\001\227\000\220\000\209\000\
\210\000\067\001\037\001\036\001\169\000\068\001\069\001\070\001\
\071\001\072\001\240\000\060\001\036\001\036\001\244\000\036\001\
\213\000\060\001\213\000\064\001\242\000\231\000\002\001\060\001\
\254\000\005\001\006\001\063\001\238\000\239\000\227\000\065\001\
\227\000\037\001\008\001\015\001\068\001\017\001\030\001\068\001\
\036\001\060\001\022\001\240\000\024\001\240\000\063\001\244\000\
\002\001\244\000\004\001\005\001\064\001\036\001\063\001\037\001\
\064\001\254\000\037\001\254\000\065\001\064\001\011\001\060\001\
\066\001\037\001\065\001\008\001\004\001\008\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\062\001\060\001\
\067\001\013\001\019\001\060\001\016\001\017\001\037\001\019\001\
\066\001\060\001\060\001\037\001\024\001\025\001\037\001\027\001\
\013\000\012\001\030\001\031\001\032\001\033\001\034\001\037\001\
\073\000\020\001\037\001\037\001\037\001\127\000\122\000\068\000\
\171\000\223\000\029\001\002\001\003\001\214\000\005\001\006\001\
\007\001\036\001\009\001\038\001\039\001\199\000\013\001\207\000\
\060\001\016\001\017\001\255\000\251\000\218\000\066\001\067\001\
\068\001\024\001\025\001\008\001\027\001\254\000\057\001\030\001\
\031\001\032\001\033\001\034\001\203\000\001\001\065\001\255\255\
\004\001\068\001\069\001\070\001\071\001\072\001\010\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\255\255\
\255\255\021\001\255\255\255\255\255\255\060\001\026\001\255\255\
\028\001\255\255\255\255\255\255\255\255\068\001\255\255\035\001\
\255\255\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\001\001\058\001\255\255\
\060\001\255\255\062\001\063\001\255\255\065\001\035\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\255\255\
\255\255\021\001\255\255\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\255\255\001\001\255\255\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\018\001\255\255\255\255\021\001\
\255\255\255\255\255\255\055\001\056\001\255\255\058\001\255\255\
\255\255\001\001\255\255\255\255\255\255\065\001\255\255\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\018\001\255\255\255\255\021\001\255\255\255\255\
\255\255\055\001\056\001\255\255\058\001\255\255\255\255\001\001\
\255\255\063\001\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\018\001\255\255\255\255\021\001\255\255\255\255\255\255\055\001\
\056\001\255\255\058\001\255\255\255\255\255\255\255\255\063\001\
\255\255\255\255\255\255\255\255\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\004\001\255\255\
\255\255\255\255\255\255\255\255\010\001\055\001\056\001\255\255\
\058\001\255\255\255\255\255\255\255\255\063\001\255\255\021\001\
\255\255\255\255\255\255\255\255\026\001\255\255\028\001\255\255\
\255\255\255\255\255\255\255\255\004\001\255\255\255\255\037\001\
\038\001\039\001\010\001\041\001\042\001\043\001\044\001\045\001\
\046\001\255\255\255\255\255\255\255\255\021\001\255\255\255\255\
\255\255\055\001\026\001\255\255\028\001\255\255\060\001\255\255\
\062\001\063\001\004\001\065\001\255\255\037\001\038\001\039\001\
\010\001\041\001\042\001\043\001\044\001\045\001\046\001\255\255\
\255\255\255\255\255\255\021\001\255\255\255\255\255\255\055\001\
\026\001\255\255\028\001\255\255\060\001\255\255\062\001\063\001\
\004\001\065\001\255\255\037\001\038\001\039\001\010\001\041\001\
\042\001\043\001\044\001\045\001\046\001\255\255\255\255\255\255\
\255\255\021\001\255\255\255\255\255\255\055\001\026\001\255\255\
\028\001\255\255\060\001\255\255\062\001\063\001\004\001\065\001\
\255\255\037\001\038\001\039\001\010\001\041\001\042\001\043\001\
\044\001\045\001\046\001\255\255\255\255\255\255\255\255\021\001\
\255\255\255\255\255\255\055\001\026\001\255\255\028\001\255\255\
\060\001\255\255\062\001\063\001\004\001\065\001\255\255\037\001\
\038\001\039\001\010\001\041\001\042\001\043\001\044\001\045\001\
\046\001\255\255\255\255\255\255\255\255\021\001\255\255\255\255\
\255\255\055\001\026\001\255\255\028\001\255\255\060\001\255\255\
\062\001\063\001\004\001\065\001\255\255\037\001\038\001\039\001\
\010\001\041\001\042\001\043\001\044\001\045\001\046\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\026\001\255\255\028\001\255\255\060\001\255\255\062\001\063\001\
\004\001\065\001\255\255\037\001\255\255\255\255\010\001\041\001\
\042\001\043\001\044\001\045\001\046\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\026\001\255\255\
\028\001\255\255\060\001\255\255\062\001\063\001\004\001\065\001\
\255\255\037\001\255\255\255\255\010\001\041\001\042\001\043\001\
\044\001\045\001\046\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\026\001\255\255\028\001\255\255\
\060\001\255\255\062\001\063\001\004\001\065\001\255\255\037\001\
\255\255\255\255\010\001\041\001\042\001\043\001\044\001\045\001\
\046\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\255\255\028\001\255\255\060\001\255\255\
\062\001\063\001\004\001\065\001\255\255\037\001\255\255\255\255\
\010\001\041\001\042\001\043\001\044\001\045\001\046\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\255\255\028\001\255\255\060\001\255\255\062\001\063\001\
\004\001\065\001\255\255\037\001\255\255\255\255\010\001\041\001\
\042\001\043\001\044\001\045\001\046\001\255\255\255\255\255\255\
\255\255\255\255\255\255\012\001\255\255\014\001\026\001\255\255\
\028\001\255\255\060\001\020\001\062\001\063\001\255\255\065\001\
\255\255\037\001\255\255\255\255\029\001\041\001\042\001\043\001\
\044\001\045\001\046\001\036\001\037\001\038\001\039\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\060\001\012\001\062\001\063\001\255\255\065\001\255\255\255\255\
\057\001\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\029\001\068\001\069\001\070\001\071\001\072\001\
\012\001\036\001\014\001\038\001\039\001\255\255\255\255\255\255\
\020\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\255\255\255\255\255\255\255\255\057\001\012\001\
\036\001\060\001\038\001\039\001\255\255\255\255\255\255\020\001\
\255\255\068\001\069\001\070\001\071\001\072\001\255\255\255\255\
\029\001\255\255\255\255\255\255\255\255\057\001\255\255\036\001\
\255\255\038\001\039\001\255\255\001\001\255\255\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\057\001\018\001\255\255\255\255\
\021\001\255\255\255\255\255\255\255\255\255\255\255\255\068\001\
\069\001\070\001\071\001\072\001\001\001\255\255\255\255\255\255\
\255\255\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\255\255\255\255\018\001\255\255\255\255\
\021\001\255\255\055\001\056\001\255\255\058\001\255\255\060\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\001\001\255\255\255\255\255\255\255\255\
\255\255\255\255\055\001\056\001\010\001\058\001\255\255\060\001\
\255\255\255\255\255\255\255\255\018\001\255\255\255\255\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\028\001\255\255\
\255\255\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\018\001\255\255\255\255\021\001\255\255\255\255\
\255\255\055\001\056\001\255\255\058\001\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\018\001\255\255\255\255\021\001\255\255\255\255\255\255\055\001\
\056\001\255\255\058\001\255\255\255\255\001\001\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\018\001\255\255\
\255\255\021\001\255\255\255\255\255\255\055\001\056\001\255\255\
\058\001\255\255\255\255\001\001\255\255\255\255\255\255\255\255\
\255\255\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\018\001\255\255\255\255\021\001\
\255\255\255\255\255\255\055\001\056\001\255\255\058\001\255\255\
\255\255\001\001\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\018\001\255\255\255\255\021\001\255\255\255\255\
\255\255\055\001\056\001\255\255\058\001\255\255\255\255\255\255\
\001\001\255\255\255\255\255\255\255\255\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\255\255\018\001\255\255\255\255\021\001\255\255\255\255\055\001\
\056\001\026\001\058\001\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\255\255\
\018\001\255\255\255\255\021\001\255\255\255\255\055\001\056\001\
\026\001\058\001\255\255\255\255\255\255\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\018\001\255\255\
\255\255\021\001\255\255\255\255\255\255\055\001\056\001\255\255\
\058\001\255\255\255\255\001\001\255\255\255\255\255\255\255\255\
\255\255\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\018\001\255\255\255\255\021\001\
\255\255\255\255\255\255\055\001\056\001\255\255\058\001\255\255\
\255\255\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\018\001\255\255\255\255\021\001\255\255\255\255\
\255\255\055\001\056\001\255\255\058\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\056\001\255\255\058\001"

let yynames_const = "\
  T_and\000\
  T_break\000\
  T_case\000\
  T_const\000\
  T_continue\000\
  T_default\000\
  T_do\000\
  T_DOWNTO\000\
  T_else\000\
  T_false\000\
  T_FOR\000\
  T_FORM\000\
  T_FUNC\000\
  T_if\000\
  T_MOD\000\
  T_NEXT\000\
  T_not\000\
  T_or\000\
  T_PROC\000\
  T_PROGRAM\000\
  T_return\000\
  T_STEP\000\
  T_switch\000\
  T_TO\000\
  T_true\000\
  T_while\000\
  T_WRITE\000\
  T_WRITELN\000\
  T_WRITESP\000\
  T_WRITESPLN\000\
  T_lparen\000\
  T_rparen\000\
  T_plus\000\
  T_minus\000\
  T_times\000\
  T_equal\000\
  T_greater\000\
  T_less\000\
  T_less_equal\000\
  T_greater_equal\000\
  T_not_equal\000\
  T_mod\000\
  T_minus_minus\000\
  T_plus_plus\000\
  T_OR\000\
  T_AND\000\
  T_NOT\000\
  T_div\000\
  T_ampersand\000\
  T_semicolon\000\
  T_fullstop\000\
  T_colon\000\
  T_comma\000\
  T_lbracket\000\
  T_rbracket\000\
  T_lbrace\000\
  T_rbrace\000\
  T_eof\000\
  "

let yynames_block = "\
  T_bool\000\
  T_char\000\
  T_int\000\
  T_REAL\000\
  T_eq\000\
  T_mod_equal\000\
  T_plus_equal\000\
  T_minus_equal\000\
  T_div_equal\000\
  T_times_equal\000\
  T_name\000\
  T_real_const\000\
  T_const_char\000\
  T_string_const\000\
  T_int_const\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'initialization) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 200 "Parser.mly"
                                                        ( () )
# 838 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 202 "Parser.mly"
                 ( ignore(initSymbolTable 256);  openScope())
# 844 "Parser.ml"
               : 'initialization))
; (fun __caml_parser_env ->
    Obj.repr(
# 204 "Parser.mly"
                                ( () )
# 850 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 205 "Parser.mly"
                              ( () )
# 858 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 207 "Parser.mly"
                        ( () )
# 865 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 208 "Parser.mly"
          ( () )
# 872 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 209 "Parser.mly"
          ( () )
# 879 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 210 "Parser.mly"
          ( () )
# 886 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string) in
    Obj.repr(
# 212 "Parser.mly"
                                         ( () )
# 895 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Types.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 214 "Parser.mly"
                                                                     ( () )
# 904 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 217 "Parser.mly"
                             ( () )
# 910 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 218 "Parser.mly"
                                         ( () )
# 918 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Types.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : (string * int list) list) in
    Obj.repr(
# 220 "Parser.mly"
                                                  ( ignore(registerVar _1 _2); ignore(List.map (registerVar _1) _3)   )
# 927 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 222 "Parser.mly"
                           ( [] )
# 933 "Parser.ml"
               : (string * int list) list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * int list) list) in
    Obj.repr(
# 223 "Parser.mly"
                                ( (_2::_3) )
# 941 "Parser.ml"
               : (string * int list) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 225 "Parser.mly"
                  ( (_1,[]) )
# 948 "Parser.ml"
               : string * int list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 226 "Parser.mly"
                   ( (_1,[]) )
# 957 "Parser.ml"
               : string * int list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int list) in
    Obj.repr(
# 227 "Parser.mly"
                           ( (_1,_2) )
# 965 "Parser.ml"
               : string * int list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Types.typ * string) in
    Obj.repr(
# 230 "Parser.mly"
                                                     ( [int_of_string (snd _2)] )
# 972 "Parser.ml"
               : int list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : int list) in
    Obj.repr(
# 231 "Parser.mly"
                                                     ( (table_size (fst _2) (snd _2) (rhs_start_pos 1)::_4) )
# 980 "Parser.ml"
               : int list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Types.typ * entry) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : (Types.typ * (string * Symbol.pass_mode * int list)) list) in
    Obj.repr(
# 233 "Parser.mly"
                                                                          ( registerFun _1 _3 )
# 988 "Parser.ml"
               : entry))
; (fun __caml_parser_env ->
    Obj.repr(
# 235 "Parser.mly"
                                 ( [] )
# 994 "Parser.ml"
               : (Types.typ * (string * Symbol.pass_mode * int list)) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Symbol.pass_mode * int list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (Types.typ * (string * Symbol.pass_mode * int list)) list) in
    Obj.repr(
# 236 "Parser.mly"
                                  ( ((_1,_2)::_3) )
# 1003 "Parser.ml"
               : (Types.typ * (string * Symbol.pass_mode * int list)) list))
; (fun __caml_parser_env ->
    Obj.repr(
# 238 "Parser.mly"
                                  ( [] )
# 1009 "Parser.ml"
               : (Types.typ * (string * Symbol.pass_mode * int list)) list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Types.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Symbol.pass_mode * int list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : (Types.typ * (string * Symbol.pass_mode * int list)) list) in
    Obj.repr(
# 239 "Parser.mly"
                                           ( ((_2,_3) :: _4) )
# 1018 "Parser.ml"
               : (Types.typ * (string * Symbol.pass_mode * int list)) list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 241 "Parser.mly"
                                   ( let a = (TYPE_proc,newFunction (id_make _2) true) in ignore(openScope());a )
# 1025 "Parser.ml"
               : Types.typ * entry))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Types.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 242 "Parser.mly"
                      ( let a = (_2,newFunction (id_make _3) true) in ignore(openScope());a )
# 1033 "Parser.ml"
               : Types.typ * entry))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 244 "Parser.mly"
                ( (_1,PASS_BY_VALUE,[]) )
# 1040 "Parser.ml"
               : string * Symbol.pass_mode * int list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 245 "Parser.mly"
                      ( (_2,PASS_BY_REFERENCE,[]) )
# 1047 "Parser.ml"
               : string * Symbol.pass_mode * int list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : int list) in
    Obj.repr(
# 246 "Parser.mly"
                                                     ( (_1,PASS_BY_REFERENCE,(table_size (fst _3) (snd _3) (rhs_start_pos 1)::_5)) )
# 1056 "Parser.ml"
               : string * Symbol.pass_mode * int list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : int list) in
    Obj.repr(
# 247 "Parser.mly"
                                          ((_1,PASS_BY_REFERENCE,(0::_4)) )
# 1064 "Parser.ml"
               : string * Symbol.pass_mode * int list))
; (fun __caml_parser_env ->
    Obj.repr(
# 249 "Parser.mly"
                         ( [] )
# 1070 "Parser.ml"
               : int list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : int list) in
    Obj.repr(
# 250 "Parser.mly"
                                              ( (table_size (fst _2) (snd _2) (rhs_start_pos 1)::_4) )
# 1078 "Parser.ml"
               : int list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : entry) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'closeScope) in
    Obj.repr(
# 252 "Parser.mly"
                                                ( forwardFunction _1 )
# 1086 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : entry) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : QuadTypes.stmt_ret_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'closeScope) in
    Obj.repr(
# 253 "Parser.mly"
                                  ( () )
# 1095 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 255 "Parser.mly"
                                                    ( () )
# 1102 "Parser.ml"
               : 'program_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'openScope) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'program_header) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : QuadTypes.stmt_ret_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'closeScope) in
    Obj.repr(
# 257 "Parser.mly"
                                                    ( () )
# 1112 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 259 "Parser.mly"
            ( openScope() )
# 1118 "Parser.ml"
               : 'openScope))
; (fun __caml_parser_env ->
    Obj.repr(
# 261 "Parser.mly"
             ( closeScope() )
# 1124 "Parser.ml"
               : 'closeScope))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Types.typ) in
    Obj.repr(
# 263 "Parser.mly"
               ( _1 )
# 1131 "Parser.ml"
               : Types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Types.typ) in
    Obj.repr(
# 264 "Parser.mly"
         ( _1 )
# 1138 "Parser.ml"
               : Types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Types.typ) in
    Obj.repr(
# 265 "Parser.mly"
         ( _1 )
# 1145 "Parser.ml"
               : Types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Types.typ) in
    Obj.repr(
# 266 "Parser.mly"
         ( _1 )
# 1152 "Parser.ml"
               : Types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 268 "Parser.mly"
                  ( ((first_el _1), (second_el _1)) )
# 1159 "Parser.ml"
               : Types.typ * string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 270 "Parser.mly"
                   ( (TYPE_int,_1, Expr(return_null())) )
# 1166 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 271 "Parser.mly"
                    ( (TYPE_real,_1, Expr(return_null())) )
# 1173 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 272 "Parser.mly"
                    ( (TYPE_char,_1 , Expr(return_null())) )
# 1180 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 273 "Parser.mly"
                      ( (TYPE_array (TYPE_char,0),_1, Expr(return_null())) )
# 1187 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 274 "Parser.mly"
              ( (TYPE_bool,"true", Expr(return_null())) )
# 1193 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 275 "Parser.mly"
               ( (TYPE_bool,"false", Expr(return_null())) )
# 1199 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 276 "Parser.mly"
                              ( ((first_el _2),"test", third_el _2) )
# 1206 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 277 "Parser.mly"
               ( _1  )
# 1213 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : entry) in
    Obj.repr(
# 278 "Parser.mly"
            ( (get_type (Quad_entry _1),"test", Expr(return_null())))
# 1220 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 279 "Parser.mly"
                   ( (check_is_number (first_el _2) (rhs_start_pos 1), "test", Expr(handle_unary_expression "+" (third_el _2) (rhs_start_pos 2))))
# 1227 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 280 "Parser.mly"
                    ( (check_is_number (first_el _2) (rhs_start_pos 1), "test", Expr(handle_unary_expression "-" (third_el _2) (rhs_start_pos 2))))
# 1234 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 281 "Parser.mly"
                  ( (check_is_bool (first_el _2) (rhs_start_pos 1), "test", Cond(handle_not (third_el _2))) )
# 1241 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 282 "Parser.mly"
                  ( (check_is_bool (first_el _2) (rhs_start_pos 1), "test", Cond(handle_not (third_el _2)))  )
# 1248 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 283 "Parser.mly"
                        ( (check_binop_types (first_el _1) (first_el _3) (rhs_start_pos 1),"test", Expr(handle_expression "+" (third_el _1) (third_el _3) (get_binop_pos()))))
# 1256 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 284 "Parser.mly"
                         ( (check_binop_types (first_el _1) (first_el _3) (rhs_start_pos 1),"test", Expr(handle_expression "-" (third_el _1) (third_el _3) (get_binop_pos()))) )
# 1264 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 285 "Parser.mly"
                         ( (check_binop_types (first_el _1) (first_el _3) (rhs_start_pos 1),"test", Expr(handle_expression "*" (third_el _1) (third_el _3) (get_binop_pos()))) )
# 1272 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 286 "Parser.mly"
                       ( (check_binop_types (first_el _1) (first_el _3) (rhs_start_pos 1), "test", Expr(handle_expression "/" (third_el _1) (third_el _3) (get_binop_pos()))) )
# 1280 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 287 "Parser.mly"
                       ( (check_int_binop_types (first_el _1) (first_el _3) (rhs_start_pos 1),"test", Expr(handle_expression "%" (third_el _1) (third_el _3) (get_binop_pos()))) )
# 1288 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 288 "Parser.mly"
                       ( (check_int_binop_types (first_el _1) (first_el _3) (rhs_start_pos 1),"test", Expr(handle_expression "%" (third_el _1) (third_el _3) (get_binop_pos()))) )
# 1296 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 289 "Parser.mly"
                         ( (check_equalities (first_el _1) (first_el _3) (rhs_start_pos 1),"test", Cond(handle_comparison "==" (third_el _1) (third_el _3) (get_binop_pos()))) )
# 1304 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 290 "Parser.mly"
                             ( (check_equalities (first_el _1) (first_el _3) (rhs_start_pos 1),"test", Cond(handle_comparison "!=" (third_el _1) (third_el _3) (get_binop_pos()))) )
# 1312 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 291 "Parser.mly"
                           ( (check_equalities (first_el _1) (first_el _3) (rhs_start_pos 1),"test", Cond(handle_comparison ">" (third_el _1) (third_el _3) (get_binop_pos()))) )
# 1320 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 292 "Parser.mly"
                        ( (check_equalities (first_el _1) (first_el _3) (rhs_start_pos 1),"test", Cond(handle_comparison "<" (third_el _1) (third_el _3) (get_binop_pos()))) )
# 1328 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 293 "Parser.mly"
                              ( (check_equalities (first_el _1) (first_el _3) (rhs_start_pos 1),"test", Cond(handle_comparison "<=" (third_el _1) (third_el _3) (get_binop_pos()))) )
# 1336 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 294 "Parser.mly"
                                 ( (check_equalities (first_el _1) (first_el _3) (rhs_start_pos 1),"test", Cond(handle_comparison ">=" (third_el _1) (third_el _3) (get_binop_pos()))) )
# 1344 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 295 "Parser.mly"
                       ( (check_bool_binop_types (first_el _1) (first_el _3) (rhs_start_pos 1),"test", Cond(handle_and (third_el _1) (third_el _3))) )
# 1352 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 296 "Parser.mly"
                       ( (check_bool_binop_types (first_el _1) (first_el _3) (rhs_start_pos 1),"test", Cond(handle_and (third_el _1) (third_el _3))) )
# 1360 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 297 "Parser.mly"
                      ( (check_bool_binop_types (first_el _1) (first_el _3) (rhs_start_pos 1),"test", Cond(handle_or (third_el _1) (third_el _3))) )
# 1368 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 298 "Parser.mly"
                      ( (check_bool_binop_types (first_el _1) (first_el _3) (rhs_start_pos 1),"test", Cond(handle_or (third_el _1) (third_el _3))) )
# 1376 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 300 "Parser.mly"
                           ( let e = lookupEntry  (id_make _1) LOOKUP_ALL_SCOPES true 
                                in (get_var_type ((get_type (Quad_entry e)), _2),
                                get_name e,Expr({code=[];place=Quad_none})))
# 1386 "Parser.ml"
               : Types.typ * string *QuadTypes.superexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 304 "Parser.mly"
                        ( 0 )
# 1392 "Parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 305 "Parser.mly"
                                          ( _4 + 1 )
# 1400 "Parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 307 "Parser.mly"
                                (  lookupEntry  (id_make _1) LOOKUP_ALL_SCOPES true )
# 1407 "Parser.ml"
               : entry))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Types.typ list) in
    Obj.repr(
# 308 "Parser.mly"
                                                 (  let e = lookupEntry  (id_make _1) LOOKUP_ALL_SCOPES true 
							in ignore(check_function_params (get_param_list e) ((first_el _3)::_4) (rhs_start_pos 1)) ; e  )
# 1417 "Parser.ml"
               : entry))
; (fun __caml_parser_env ->
    Obj.repr(
# 311 "Parser.mly"
                          ( [] )
# 1423 "Parser.ml"
               : Types.typ list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ list) in
    Obj.repr(
# 312 "Parser.mly"
                                ( first_el _2::_3 )
# 1431 "Parser.ml"
               : Types.typ list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : QuadTypes.stmt_ret_type) in
    Obj.repr(
# 314 "Parser.mly"
                                       ( _2 )
# 1438 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 316 "Parser.mly"
                          ( return_null_stmt () )
# 1444 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : QuadTypes.stmt_ret_type) in
    Obj.repr(
# 317 "Parser.mly"
                             ( _2 )
# 1452 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : QuadTypes.stmt_ret_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : QuadTypes.stmt_ret_type) in
    Obj.repr(
# 318 "Parser.mly"
                        ( handle_stmt_merge _1 _2 )
# 1460 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 320 "Parser.mly"
                      ( () )
# 1467 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 321 "Parser.mly"
             ( () )
# 1474 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 323 "Parser.mly"
                   ( return_null_stmt () )
# 1480 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Types.typ * string *QuadTypes.superexpr) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 324 "Parser.mly"
                                       (ignore(check_assign _2 (first_el _1) (first_el _3)  (rhs_start_pos 1)); handle_assignment (dereference (third_el _1)) (third_el _3) (get_binop_pos())  )
# 1489 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 325 "Parser.mly"
                                      (ignore(check_assign "+=" (first_el _1) (first_el _1) (rhs_start_pos 1)); return_null_stmt() )
# 1496 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 326 "Parser.mly"
                                         ( ignore(check_assign "-=" (first_el _1) (first_el _1) (rhs_start_pos 1)); return_null_stmt() )
# 1503 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : entry) in
    Obj.repr(
# 327 "Parser.mly"
                        ( return_null_stmt() )
# 1510 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Types.typ * string *QuadTypes.superexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : QuadTypes.stmt_ret_type) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : QuadTypes.stmt_ret_type) in
    Obj.repr(
# 328 "Parser.mly"
                                                    ( ignore(check_is_bool (first_el _3)  (rhs_start_pos 1)); handle_if_else_stmt (third_el _3) _5 _7)
# 1519 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : QuadTypes.stmt_ret_type) in
    Obj.repr(
# 329 "Parser.mly"
                                        ( ignore(check_is_bool (first_el _3)  (rhs_start_pos 1)); handle_if_stmt (third_el _3) _5)
# 1527 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'stoppable) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : QuadTypes.stmt_ret_type) in
    Obj.repr(
# 330 "Parser.mly"
                                                     ( (ignore(check_is_bool (first_el _4)  (rhs_start_pos 1)) ; in_loop := false); handle_while_stmt (third_el _4) _6 )
# 1536 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'stoppable) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : QuadTypes.stmt_ret_type) in
    Obj.repr(
# 331 "Parser.mly"
                                                                   ( (in_loop := false); return_null_stmt()(*handle_for_stmt*) )
# 1546 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'stoppable) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : QuadTypes.stmt_ret_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 332 "Parser.mly"
                                                                      ( (ignore(check_is_bool (first_el _6)  (rhs_start_pos 1)) ; in_loop := false); handle_do_while_stmt _3 (third_el _6) )
# 1555 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : 'stoppable) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : Types.typ * string *QuadTypes.superexpr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : unit) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 333 "Parser.mly"
                                                                                                         ( in_loop := false; return_null_stmt() )
# 1565 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'stoppable) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Types.typ * string *QuadTypes.superexpr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 334 "Parser.mly"
                                                                                ( in_loop := false; return_null_stmt() )
# 1574 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 335 "Parser.mly"
                           ( ignore(if not !in_loop then print_error "break not in loop" (rhs_start_pos 1)); handle_break )
# 1580 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 336 "Parser.mly"
                              ( ignore(if not !in_loop then print_error "continus not in loop" (rhs_start_pos 1)); handle_continue )
# 1586 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 337 "Parser.mly"
                            ( return_null_stmt() )
# 1592 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 338 "Parser.mly"
                                 ( () )
# 1599 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'openScope) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : QuadTypes.stmt_ret_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'closeScope) in
    Obj.repr(
# 339 "Parser.mly"
                                  ( () )
# 1608 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    Obj.repr(
# 340 "Parser.mly"
                                           ( () )
# 1615 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    Obj.repr(
# 341 "Parser.mly"
                                                                ( () )
# 1624 "Parser.ml"
               : QuadTypes.stmt_ret_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 343 "Parser.mly"
            (in_loop := true)
# 1630 "Parser.ml"
               : 'stoppable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 345 "Parser.mly"
              ( _1 )
# 1637 "Parser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 346 "Parser.mly"
                      ( _1 )
# 1644 "Parser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 347 "Parser.mly"
                       ( _1 )
# 1651 "Parser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 348 "Parser.mly"
                     ( _1 )
# 1658 "Parser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 349 "Parser.mly"
                     ( _1 )
# 1665 "Parser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 350 "Parser.mly"
                       ( _1 )
# 1672 "Parser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 352 "Parser.mly"
                       ( () )
# 1680 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 353 "Parser.mly"
                                   ( () )
# 1689 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 354 "Parser.mly"
                           ( () )
# 1697 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Types.typ * string *QuadTypes.superexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Types.typ * string *QuadTypes.superexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 355 "Parser.mly"
                                       ( () )
# 1706 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 357 "Parser.mly"
                        ( () )
# 1712 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : QuadTypes.stmt_ret_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 358 "Parser.mly"
                    ( (handle_stmt_merge _1 _2) )
# 1720 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 360 "Parser.mly"
                   ( () )
# 1727 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    Obj.repr(
# 361 "Parser.mly"
                                      ( () )
# 1734 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 363 "Parser.mly"
                           ( () )
# 1740 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 364 "Parser.mly"
                                       ( () )
# 1749 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Types.typ * string) in
    Obj.repr(
# 366 "Parser.mly"
                                        ( () )
# 1756 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Types.typ * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 367 "Parser.mly"
                                                 ( () )
# 1764 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 369 "Parser.mly"
                           ( () )
# 1770 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 370 "Parser.mly"
                                     ( () )
# 1778 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 374 "Parser.mly"
                ( () )
# 1784 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 375 "Parser.mly"
                  ( () )
# 1790 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 376 "Parser.mly"
                  ( () )
# 1796 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 377 "Parser.mly"
                    ( () )
# 1802 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 379 "Parser.mly"
               ( () )
# 1809 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Types.typ * string *QuadTypes.superexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 380 "Parser.mly"
                                              ( () )
# 1817 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Types.typ * string *QuadTypes.superexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Types.typ * string *QuadTypes.superexpr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Types.typ * string *QuadTypes.superexpr) in
    Obj.repr(
# 381 "Parser.mly"
                                                           ( () )
# 1826 "Parser.ml"
               : unit))
(* Entry pmodule *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let pmodule (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
