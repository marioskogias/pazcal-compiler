Η γλώσσα Pazcal και ο μεταγλωτιστής της
========================================

1. Εισαγωγή
------------

Η γλώσσα PaZcal είναι μια γλώσσα Η γλώσσα Pazcal είναι μια απλή γλώσσα
προστακτικού προγραμματισμού — είναι αυτή που διδάσκεται στο πρώτο εξάμηνο της
ΣΗΜΜΥ. Βασίζεται σε ένα γνήσιο υποσύνολο της ISO C99 (ή της ISO
C++11), με αρκετές απλοποιήσεις και μερικά macros που κατά σύμβαση γράφονται με
κεφαλαία γράμματα για να ξεχωρίζουν και που εδώ εμφανίζονται ως ενσωματωμένα
στη γλώσσα. Βασικά χαρακτηριστικά της γλώσσας είναι:

* η σύνταξη εντολών και εκφράσεων παρόμοια με αυτή της C
* συναρτήσεις με τους κανόνες εμβέλειας της C.
* Βασικοί τύποι δεδομένων για ακέραιους και πραγματικούς αριθμούς, λογικές τιμέ
  και χαρακτήρες.
* Πίνακες με γνωστό ή άγνωστο μέγεθος.
* Βιβλιοθήκη συναρτήσεων

Ως γλώσσα υλοποίησης επιλέχθηκε η OCaml λόγω των εργαλείων ocamllex και
ocamlyacc. Επιπλέον, η εκρφραστικότητα του συναρτησιακού προγραμματισμού φάνηκε
ιδαίτερα χρήσιμη σε όλη την διάρκεια ανάπτυξης. Λόγω της γνώσης από προηγούμενα
μαθήματα της assembly 8086, ως περιβάλλον εκτέλεσης επιλέχθηκε το συστημα DOS,
μέσω του προσομοιωτή DOSBOX.

Παρακάτω, περιγράφουμε τις σχεδιαστικές επιλογές που έγιναν για κάθε τμήμα του
μεταγλωτιστή.

2. Λεκτικός αναλυτής
---------------------

Το πρώτο στάδιο ανάπτυξη του μεταγλωτιστή περιελάμβανε τη δημιουργία του
λεκτικού αναλυτή. Ο λεκτικός αναλυτής είναι εκείνο το κομμάτι του μεταγλωτιστή
που δέχεται σαν είσοδο πηγαίο κώδικα PaZcal και επιστρέφει τα σύμβολα της
γλώσσας που αναγνωρίστηκαν.

Για τη δημιουργία του λεκτικού αναλυτή χρησιμοποιήσαμε το εργαλείο ocamllex της
ocaml. Το εργαλείο αυτό με βάση το αρχείο :download:`Lexer.mll
<../../Lexer.mll>` στο οποίο ορίζονται οι λεκτικές μονάδες της γλώσσας, παράγει
τον OCaml κώδικα του λεκτικού αναλυτή. Το αρχείο αυτό περιέχει τόσο τις
δεσμευμένες λέξεις της γλώσσας όπως ``if``, ``true``, ``and`` κλπ. καθώς,
κανονικές εκφράσεις οι οποίες ορίζουν συμβολοσειρές, αριθμητικές σταθερές κλπ
καθώς και οδηγίες προς το επόμενο στάδιο, όπως το ``end of file``.

Ο λεκτικός αυτός αναλυτής περιλαμβάνει μια συνάρτηση για κάθε λεκτική μονάδα που
ορίζεται στο προηγούμενο αρχείο, η οποία εκτελείται όταν βρεθεί η συγκεκριμένη
λεκτική μονάδα στην είσοδο. Στην περίπτωση ανάγνωσης κάποιου άγνωστου χαρακτήρα
(χαρακτήρα για τον οποίο δεν προδιαγράφεται συγκεκριμένη λειτουργία)η λεκτική
ανάλυση σταματάει και επιστρέφεται μήνυμα λάθους στο χρήστη.

Ο λεκτικός αναλυτής απομονώνει τις λεκτικές μονάδες που είναι η είσοδος στο
επόμενο στάδιο του μεταγλωτιστή, τον συντακτικό αναλυτή.

3. Συνταντικός αναλυτής
------------------------

Ο συναντικτικός αναλυτής είναι εκείνο το κομμάτι του μεταγλωτιστή που συνδιάζει
τις λεκτικές μονάδες που αναγνωρίζει ο λεκτικός αναλυτής με βάση τη γραμματική
της γλώσσας PaZcal.

Για τη δημιουργία του συντακτικού αναλυτή χρησιμοποιήθηκε το εργαλείο ocamlyacc
της OCaml. Σε αντίστοιχη λογική με το Lexer.mll το ocamlyacc δέχεται σαν είσοδο
το αρχείο :download:`Parser.mly <../../Parser.mly>` και παράγει τον κώδικα του
συντακτικού αναλυτή. Το αρχείο αυτό είναι δομημένο σε 3 τμήματα. Το πρώτο τμήμα
περιέχει κώδικα OCaml βοηθητικών συναρτήσεων, το δεύτερο περιέχει τις λεκτικές
μονάδες που περιμένει από το λεκτικό αναλυτή ο Parser και το τρίτο περιέχει τους
κανόνες τις γραμματικής που δημιουργούνται με βάση τις λεκτικές μονάδες. Μόλις
ένας κανόνας γίνει `reduce` τότε εκτελείται το action που ορίζεται στις αγκύλες
διπλα από τον συγκεκριμένο κανόνα. Το action αυτό περιλαμβάνει τον κώδικα για
την σημασιολογική ανάλυση και την παραγωγή του ενδιάμεσου κώδικα.

Το αρχείο αυτό δημιουργήθηκε με βάση την πλήρη :download:`γραμματική της PaZcal
<pazcal2014.pdf>` τροποποιώντας τη ανάλογα με τους περιορισμούς που
θέτει το ocamlyacc.

Η έξοδος του ocamlyacc είναι το αρχείο ``Parser.ml`` που περιέχει τον κώδικα του
συνακτικού αναλυτή.

4. Σημασιολογική ανάλυση
-------------------------

Ακόμα και αν ένα πρόγραμμα είναι συνακτικά ορθό, δηλαδή οι λεκτικές μονάδες που
το αποτελούν είναι τοποθετημένες σε σειρά σύμφωνη με τη γραμματική της γλώσσας,
είναι πιθανό να περιέχει σημασιολογικά λάθη.

Ο κώδικας του σημασιολογικού αναλυτή είναι σπασμένος σε συναρτήσεις ελέγχου οι
οποίες εφαρμόζονται στον Parser πριν την παραγωγή του ενδιάμεσου κώδικα. Στη
περίπτωση σημασιολογικού λάθους παράγεται το αντίστοιχο μήνυμα σφάλματος που
ενημερώνει το χρήστη για το λάθος το και το σημείο που αυτό συνέβη.

Με τη βοήθεια και του πίνακα συμβόλων, με το σημασιολογικό αναλυτή ελέγχεται:

* τύπος των τελούμενων σε αριθμητικές και λογικές πράξεις
* διπλός ορισμός ονόματος στην ίδια εμβέλεια (ορισμός μεταβλητής με όνομα που
  ήδη υπάρχει ή ορισμός συνάρτησης όταν ήδη έχει δοθεί ο ορισμός της ή ορισμός
  συνάρτησης με όνομα ίδιο με αυτό μεταβλητής ή το αντίστροφο)
* Κλήση συνάρτησης που δεν έχει δηλωθεί
* Κλήση συνάρτησης με λάθος αριθμό παραμέτρων
* Κλήση συνάρτησης με λάθος τύπο ορισμάτων
* Χρήση μεταβλητής που δεν έχει δηλωθεί
* Κλήση ``break`` ή ``continue`` εκτός loop
* Μη συμβατοί τύποι προορισμού και προέλευσης σε εντολές ανάθεσης
* Κλήση return εκτός συνάρτησης ή διαδικασίας ή παράλειψή του

5. Ενδιάμεσος κώδικας
----------------------
!FIXME

6. Βελτιστοποιήσεις
--------------------
!FIXME

7. Τελικός κώδικας
-------------------

Τελευταίο στάδιο του μεταγλωτιστή είναι η παραγωγή του τελικού κώδικα. Στο
στάδιο αυτό ο ενδιάμεσος κώδικας μετατρέπεται σε κώδικα assembly 8086 σύμφωνα με
το πρότυπο της Microsoft για συμβολομετάφραση με το συμβολομεταφραστή ``MASM``.

Το σχέδιο παραγωγής τελικού κώδικα είναι αυτό που προτείνεται στο βιβλίο του
μαθήματος, με βάση τη στοίβα. Επομένως, δεν υπάρχουν βελτιστοποιήσεις σχετικά με
τη δέσμευση καταχωρητών. Δεδομένου ότι δεδομένα τύπου int έχουν μήκος 2 byte,
ενώ τύπου char ή bool 1 byte γίνεται και ανάλογη ανάθεση σε καταχωρητές 1 ή 2
byte για τις πράξεις.

Επιπλέον, προστέθηκαν κάποιες βασικές συναρτήσεις βιβλιοθήκης στις δεδομένες για
να αντιστοιχούν 1 προς 1 με τις συναρτήσεις βιβλιοθήκης της PaZcal.

Για να ξεκινήσει η εκτέλεση δημιουργείται ένα υποτυπώδες εγγράγημα
δραστηριοποίησης το οποίο περιέχει και τις global μεταβλητές αν υπάρχουν και στη
συνέχεια γίνεται jump στο κατάλληλο σημείο του κώδικα για να ξεκινήσει η
εκτέλεση.

Επίσης, σχετικά με τις αλφαριθμητικές σταθερές που συναντώνται στο πρόγραμμα,
τοποθετούνται σε σταθερές θέσεις μνήνης στο τέλος του προγράμματος
χρησιμοποιώντας τη δυνατότητα που προσφέρει η assembly 8086 μέσω της εντολής
``db``.

Η μόνη βελτιστοποίηση τελικού κώδικα που πραγματοποιήθηκε ήταν στην περίπτωση
συνεχόμενων αναθέσεων στον ίδιο καταχωρητή, να διατηρείται μόνο η τελευταία
ανάθεση.
